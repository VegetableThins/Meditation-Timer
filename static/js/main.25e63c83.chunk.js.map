{"version":3,"sources":["Components/MeditationSetup.js","Components/MeditationTimer.js","Components/App.js","serviceWorker.js","index.js"],"names":["MeditationSetup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateTime","bind","assertThisInitialized","handleClick","e","changeMinutes","target","value","console","log","startTimer","react_default","a","createElement","className","minutes","onChange","onClick","React","Component","MeditationTimer","state","completed","preCancel","handleCancel","_this2","index_es","date","Date","now","medTime","renderer","_ref","hours","seconds","App","isMeditating","event","setState","parseInt","Components_MeditationTimer","Components_MeditationSetup","Boolean","window","location","hostname","match","ReactDOM","render","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25e63c83.chunk.js","sourcesContent":["import React from 'react'\n\nclass MeditationSetup extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.updateTime = this.updateTime.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    updateTime(e) {\n        this.props.changeMinutes(e.target.value);\n        console.log(\"minutes updated to: \" + e.target.value);\n    }\n\n    handleClick(e){\n        this.props.startTimer();\n    }\n\n    render(){\n        return(\n            <div className=\"jumbotron\">\n                <h1>Welcome to some piece of mind</h1>\n                <p>To begin please enter the length of time you wish to meditate for:</p>\n                <div className=\"row\">\n                <select className=\"col-8 form-control\" value={this.props.minutes} onChange={this.updateTime}>\n                    <option value=\"5\">5 Minutes</option>\n                    <option value=\"10\">10 Minutes</option>\n                    <option value=\"15\">15 Minutes</option>\n                    <option value=\"20\">20 Minutes</option>\n                    <option value=\"25\">25 Minutes</option>\n                    <option value=\"30\">30 Minutes</option>\n                    <option value=\"35\">35 Minutes</option>\n                    <option value=\"40\">40 Minutes</option>\n                    <option value=\"45\">45 Minutes</option>\n                    <option value=\"50\">50 Minutes</option>\n                    <option value=\"55\">55 Minutes</option>\n                    <option value=\"60\">1 Hour</option>\n                    </select>\n                    <button className=\"col-4 btn btn-primary\" onClick={this.handleClick}>Start</button>\n                </div>\n            {/* <div class=\"dropdown\">\n                <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    Dropdown\n                </button>\n                <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                    <button class=\"dropdown-item\" type=\"button\">Action</button>\n                    <button class=\"dropdown-item\" type=\"button\">Another action</button>\n                    <button class=\"dropdown-item\" type=\"button\">Something else here</button>\n                </div>\n            </div> */}\n          </div>\n        )\n    }\n}\n\n  export default MeditationSetup;","import React from 'react';\nimport Countdown from 'react-countdown-now'\n\nclass MeditationTimer extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            completed: false,\n        };\n        this.preCancel = this.preCancel.bind(this);\n    }\n\n    preCancel(e){\n        this.props.handleCancel(e);\n    }\n\n    render() {\n        const renderer = ({ hours, minutes, seconds, completed }) => {\n            if (completed) {\n                // Render a completed state\n                return (\n                    <div className=\"jumbotron\">\n                        <h1>Meditation Completed!</h1>\n                        <button className=\"btn btn-success\" onClick={this.preCancel}>Finish</button>\n                    </div>\n                    );\n            } else {\n                // Render a countdown\n                return (\n                    <div className=\"jumbotron\">\n                        <h1>Time Remaining</h1>\n                        <h3>{hours}:{minutes}:{seconds}</h3>\n                        <button className=\"btn btn-warning\" onClick={this.preCancel}>Cancel</button>\n                    </div>\n                );\n            }\n        };\n        return (\n            <div>\n                <Countdown className=\"jumbotron\" date={Date.now() + this.props.medTime} renderer={renderer} />\n            </div>\n      )\n    }\n}\n\nexport default MeditationTimer; ","import React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js'\nimport MeditationTimer from './MeditationTimer.js'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\n// Fix displays on mobile and style\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false,\n    };\n\n    this.changeMinutes = this.changeMinutes.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    \n  }\n  \n  changeMinutes(event){\n    this.setState({\n        minutes: event,\n    });\n    console.log(this.state.minutes);\n  }\n  \n  handleCancel(e){\n    this.setState({\n      isMeditating: false,\n    })\n  }\n\n  startTimer(event) {\n    this.setState({isMeditating: !this.state.isMeditating});\n      this.setState({\n          medTime: (parseInt(this.state.minutes, 10) * 1000 * 60),\n      });\n    }\n  render(){\n    if(!this.state.isMeditating){\n      return(\n        <div className=\"container\">\n          <MeditationSetup changeMinutes={this.changeMinutes} startTimer={this.startTimer}></MeditationSetup>\n        </div>\n      );\n    }else{\n      return(\n        <div className=\"container\">\n          {/* Setup a wait feature before starting to meditate to tell them to get comfortable etc. */}\n          <MeditationTimer className=\"jumbotron\" date={this.state.medTime} handleCancel={this.handleCancel} medTime={this.state.medTime}/>\n          \n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}