{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js\";\nimport React from 'react';\nimport Countdown from 'react-countdown-now';\nimport PropTypes from 'prop-types';\n\nclass MeditationSetup extends React.Component {\n  constructor(props) {\n    super(props); //   this.state = {\n    //     minutes: \"5\",\n    //     medTime: 0,\n    //     isMeditating: false,\n    //   };\n\n    this.updateTime = this.updateTime.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  updateTime(e) {\n    console.log(\"minutes updated\"); // this.setState({\n    //     minutes: e.target.value,\n    // });\n\n    this.props.minutes = e.target.value;\n  }\n\n  startTimer(event) {\n    console.log('Meditation beginning with: ' + this.props.medTime / 1000 / 60 + 'minutes remaining'); //this.setState({isMeditating: true});\n    // this.setState({\n    //     medTime: (parseInt(this.state.minutes, 10) * 1000 * 60)\n    // });\n\n    this.props.medTime = parseInt(this.props.minutes, 10) * 1000 * 60; //   this.setState({medTime: this.state.time});\n\n    event.preventDefault();\n  }\n\n  render() {\n    var minutes = \"5\";\n    var medTime = 0;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Welcome to some piece of mind\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"To begin please enter the length of time you wish to meditate for:\"), React.createElement(\"select\", {\n      value: minutes,\n      onChange: this.updateTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"5 Minutes\"), React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"10 Minutes\"), React.createElement(\"option\", {\n      value: \"15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"15 Minutes\"), React.createElement(\"option\", {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"20 Minutes\")), React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Start\"), React.createElement(Countdown, {\n      date: Date.now() + medTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n} // MeditationSetup.propTypes = {\n//     medTime: PropTypes.number.isRequired\n// }\n//figure out how to dynamically create this object with the value from the Setup\n//also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n\nexport default MeditationSetup;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js"],"names":["React","Countdown","PropTypes","MeditationSetup","Component","constructor","props","updateTime","bind","startTimer","e","console","log","minutes","target","value","event","medTime","parseInt","preventDefault","render","Date","now"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEnB;AACA;AACA;AACA;AACA;;AAEE,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AACDD,EAAAA,UAAU,CAACG,CAAD,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EADU,CAEV;AACA;AACA;;AACA,SAAKN,KAAL,CAAWO,OAAX,GAAqBH,CAAC,CAACI,MAAF,CAASC,KAA9B;AACH;;AAEDN,EAAAA,UAAU,CAACO,KAAD,EAAQ;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAiC,KAAKN,KAAL,CAAWW,OAAX,GAAqB,IAArB,GAA4B,EAA7D,GAAkE,mBAA9E,EADgB,CAEhB;AACE;AACA;AACA;;AACA,SAAKX,KAAL,CAAWW,OAAX,GAAqBC,QAAQ,CAAC,KAAKZ,KAAL,CAAWO,OAAZ,EAAqB,EAArB,CAAR,GAAmC,IAAnC,GAA0C,EAA/D,CANc,CAOlB;;AACEG,IAAAA,KAAK,CAACG,cAAN;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIP,OAAO,GAAG,GAAd;AACA,QAAII,OAAO,GAAG,CAAd;AACF,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAFF,EAII;AAAQ,MAAA,KAAK,EAAEJ,OAAf;AAAwB,MAAA,QAAQ,EAAE,KAAKN,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CAJJ,EAUI;AAAQ,MAAA,OAAO,EAAE,KAAKE,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVJ,EAaE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEY,IAAI,CAACC,GAAL,KAAaL,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAiBD;;AAnDwC,C,CAsD7C;AACA;AACA;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,eAAed,eAAf","sourcesContent":["import React from 'react'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\nclass MeditationSetup extends React.Component{\n    constructor(props) {\n      super(props);\n    //   this.state = {\n    //     minutes: \"5\",\n    //     medTime: 0,\n    //     isMeditating: false,\n    //   };\n  \n      this.updateTime = this.updateTime.bind(this);\n      this.startTimer = this.startTimer.bind(this);\n    }\n    updateTime(e) {\n        console.log(\"minutes updated\");\n        // this.setState({\n        //     minutes: e.target.value,\n        // });\n        this.props.minutes = e.target.value;\n    }\n  \n    startTimer(event) {\n      console.log('Meditation beginning with: ' + (this.props.medTime / 1000 / 60)+ 'minutes remaining');\n      //this.setState({isMeditating: true});\n        // this.setState({\n        //     medTime: (parseInt(this.state.minutes, 10) * 1000 * 60)\n        // });\n        this.props.medTime = parseInt(this.props.minutes, 10) * 1000 * 60;\n    //   this.setState({medTime: this.state.time});\n      event.preventDefault();\n    }\n    \n    render(){\n        var minutes = \"5\";\n        var medTime = 0;\n      return(\n        <div>\n          <h1>Welcome to some piece of mind</h1>\n          <p>To begin please enter the length of time you wish to meditate for:</p>\n          {/* <form onSubmit={this.handleSubmit}> */}\n            <select value={minutes} onChange={this.updateTime}>\n              <option value=\"5\">5 Minutes</option>\n              <option value=\"10\">10 Minutes</option>\n              <option value=\"15\">15 Minutes</option>\n              <option value=\"20\">20 Minutes</option>\n            </select>\n            <button onClick={this.startTimer}>Start</button>\n          {/* </form> */}\n          {/* <Timer time={this.state.medTime}></Timer> */}\n          <Countdown date={Date.now() + medTime} />\n        </div>\n      )\n    }\n}\n\n// MeditationSetup.propTypes = {\n//     medTime: PropTypes.number.isRequired\n// }\n\n  //figure out how to dynamically create this object with the value from the Setup\n  //also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n            \n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n  export default MeditationSetup;"]},"metadata":{},"sourceType":"module"}