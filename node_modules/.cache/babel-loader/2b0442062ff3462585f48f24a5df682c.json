{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/App.js\";\nimport React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js';\nimport Countdown from 'react-countdown-now';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false\n    };\n    this.updateTime = this.updateTime.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  updateTime(e) {\n    console.log(\"minutes updated\");\n    this.setState({\n      minutes: e.target.value\n    }); //this.props.minutes = e.target.value;\n  }\n\n  startTimer(event) {\n    console.log('Meditation beginning with: ' + this.props.medTime / 1000 / 60 + 'minutes remaining');\n    const isMeditating = this.state.isMeditating;\n    this.setState({\n      isMeditating: !isMeditating\n    });\n    this.setState((props, state) => ({\n      medTime: parseInt(this.state.minutes, 10) * 1000 * 60\n    })); // this.props.medTime = parseInt(this.props.minutes, 10) * 1000 * 60;\n    //   this.setState({medTime: this.state.time});\n    //   event.preventDefault();\n  }\n\n  render() {\n    const isMeditating = this.state.isMeditating;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Welcome to some piece of mind\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"To begin please enter the length of time you wish to meditate for:\"), React.createElement(\"select\", {\n      value: this.state.minutes,\n      onChange: this.updateTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"5 Minutes\"), React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"10 Minutes\"), React.createElement(\"option\", {\n      value: \"15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"15 Minutes\"), React.createElement(\"option\", {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"20 Minutes\")), React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Start\"), this.state.isMeditating && React.createElement(Countdown, {\n      date: Date.now() + this.state.medTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/App.js"],"names":["React","MeditationSetup","Countdown","PropTypes","App","Component","constructor","props","state","minutes","medTime","isMeditating","updateTime","bind","startTimer","e","console","log","setState","target","value","event","parseInt","render","Date","now"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,GADE;AAEXC,MAAAA,OAAO,EAAE,CAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAMA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AAED;;AACDD,EAAAA,UAAU,CAACG,CAAD,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,SAAKC,QAAL,CAAc;AACVT,MAAAA,OAAO,EAAEM,CAAC,CAACI,MAAF,CAASC;AADR,KAAd,EAFU,CAKV;AACH;;AAEDN,EAAAA,UAAU,CAACO,KAAD,EAAQ;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAiC,KAAKV,KAAL,CAAWG,OAAX,GAAqB,IAArB,GAA4B,EAA7D,GAAkE,mBAA9E;AADgB,UAETC,YAFS,GAEO,KAAKH,KAFZ,CAETG,YAFS;AAGhB,SAAKO,QAAL,CAAc;AAACP,MAAAA,YAAY,EAAE,CAACA;AAAhB,KAAd;AACE,SAAKO,QAAL,CAAc,CAACX,KAAD,EAAQC,KAAR,MAAmB;AAC7BE,MAAAA,OAAO,EAAGY,QAAQ,CAAC,KAAKd,KAAL,CAAWC,OAAZ,EAAqB,EAArB,CAAR,GAAmC,IAAnC,GAA0C;AADvB,KAAnB,CAAd,EAJc,CAOd;AACJ;AACA;AACC;;AAEDc,EAAAA,MAAM,GAAE;AACJ,UAAMZ,YAAY,GAAG,KAAKH,KAAL,CAAWG,YAAhC;AACF,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAFF,EAGI;AAAQ,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,OAA1B;AAAmC,MAAA,QAAQ,EAAE,KAAKG,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CAHJ,EASI;AAAQ,MAAA,OAAO,EAAE,KAAKE,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATJ,EAYG,KAAKN,KAAL,CAAWG,YAAX,IAA2B,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEa,IAAI,CAACC,GAAL,KAAa,KAAKjB,KAAL,CAAWE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZ9B,CADF;AAgBD;;AAnD8B;;AAsDjC,eAAeN,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false,\n    };\n\n    this.updateTime = this.updateTime.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    \n  }\n  updateTime(e) {\n      console.log(\"minutes updated\");\n      this.setState({\n          minutes: e.target.value,\n      });\n      //this.props.minutes = e.target.value;\n  }\n\n  startTimer(event) {\n    console.log('Meditation beginning with: ' + (this.props.medTime / 1000 / 60)+ 'minutes remaining');\n    const {isMeditating} = this.state; \n    this.setState({isMeditating: !isMeditating});\n      this.setState((props, state) => ({\n          medTime: (parseInt(this.state.minutes, 10) * 1000 * 60),\n      }));\n      // this.props.medTime = parseInt(this.props.minutes, 10) * 1000 * 60;\n  //   this.setState({medTime: this.state.time});\n  //   event.preventDefault();\n  }\n  \n  render(){\n      const isMeditating = this.state.isMeditating;\n    return(\n      <div>\n        <h1>Welcome to some piece of mind</h1>\n        <p>To begin please enter the length of time you wish to meditate for:</p>\n          <select value={this.state.minutes} onChange={this.updateTime}>\n            <option value=\"5\">5 Minutes</option>\n            <option value=\"10\">10 Minutes</option>\n            <option value=\"15\">15 Minutes</option>\n            <option value=\"20\">20 Minutes</option>\n          </select>\n          <button onClick={this.startTimer}>Start</button>\n        {/* </form> */}\n        {/* <Timer time={this.state.medTime}></Timer> */}\n        {this.state.isMeditating && <Countdown date={Date.now() + this.state.medTime}/>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}