{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/App.js\";\nimport React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js';\nimport MeditationTimer from './MeditationTimer.js';\nimport Countdown from 'react-countdown-now';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false\n    };\n    this.changeMinutes = this.changeMinutes.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  changeMinutes(event) {\n    this.setState({\n      minutes: event\n    });\n    console.log(this.state.minutes);\n  }\n\n  handleCancel(e) {\n    this.setState({\n      isMeditating: false\n    });\n  }\n\n  startTimer(event) {\n    this.setState({\n      isMeditating: !this.state.isMeditating\n    });\n    this.setState({\n      medTime: parseInt(this.state.minutes, 10) * 1000 * 60\n    });\n  }\n\n  render() {\n    //find a cleaner solution to the below code CHECK\n    if (!this.state.isMeditating) {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(MeditationSetup, {\n        changeMinutes: this.changeMinutes,\n        startTimer: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(MeditationTimer, {\n        className: \"jumbotron\",\n        date: this.state.medTime,\n        handleCancel: this.handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/App.js"],"names":["React","MeditationSetup","MeditationTimer","Countdown","PropTypes","App","Component","constructor","props","state","minutes","medTime","isMeditating","changeMinutes","bind","handleCancel","startTimer","event","setState","console","log","e","parseInt","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAiC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,GADE;AAEXC,MAAAA,OAAO,EAAE,CAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAMA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AAED;;AAEDD,EAAAA,aAAa,CAACI,KAAD,EAAO;AAClB,SAAKC,QAAL,CAAc;AACVR,MAAAA,OAAO,EAAEO;AADC,KAAd;AAGAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWC,OAAvB;AACD;;AAEDK,EAAAA,YAAY,CAACM,CAAD,EAAG;AACb,SAAKH,QAAL,CAAc;AACZN,MAAAA,YAAY,EAAE;AADF,KAAd;AAGD;;AAEDI,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,SAAKC,QAAL,CAAc;AAACN,MAAAA,YAAY,EAAE,CAAC,KAAKH,KAAL,CAAWG;AAA3B,KAAd;AACE,SAAKM,QAAL,CAAc;AACVP,MAAAA,OAAO,EAAGW,QAAQ,CAAC,KAAKb,KAAL,CAAWC,OAAZ,EAAqB,EAArB,CAAR,GAAmC,IAAnC,GAA0C;AAD1C,KAAd;AAGD;;AACHa,EAAAA,MAAM,GAAE;AACN;AACA,QAAG,CAAC,KAAKd,KAAL,CAAWG,YAAf,EAA4B;AAC1B,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAiB,QAAA,aAAa,EAAE,KAAKC,aAArC;AAAoD,QAAA,UAAU,EAAE,KAAKG,UAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KAND,MAMK;AACH,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAiB,QAAA,SAAS,EAAC,WAA3B;AAAuC,QAAA,IAAI,EAAE,KAAKP,KAAL,CAAWE,OAAxD;AAAiE,QAAA,YAAY,EAAE,KAAKI,YAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAMD;AACF;;AAlD8B;;AAqDjC,eAAeV,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js'\nimport MeditationTimer from './MeditationTimer.js'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false,\n    };\n\n    this.changeMinutes = this.changeMinutes.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    \n  }\n  \n  changeMinutes(event){\n    this.setState({\n        minutes: event,\n    });\n    console.log(this.state.minutes);\n  }\n  \n  handleCancel(e){\n    this.setState({\n      isMeditating: false,\n    })\n  }\n\n  startTimer(event) {\n    this.setState({isMeditating: !this.state.isMeditating});\n      this.setState({\n          medTime: (parseInt(this.state.minutes, 10) * 1000 * 60),\n      });\n    }\n  render(){\n    //find a cleaner solution to the below code CHECK\n    if(!this.state.isMeditating){\n      return(\n        <div className=\"container\">\n          <MeditationSetup changeMinutes={this.changeMinutes} startTimer={this.startTimer}></MeditationSetup>\n        </div>\n      );\n    }else{\n      return(\n        <div className=\"container\">\n          <MeditationTimer className=\"jumbotron\" date={this.state.medTime} handleCancel={this.handleCancel}/>\n          \n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}