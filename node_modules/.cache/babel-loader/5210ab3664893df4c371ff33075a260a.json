{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js\";\nimport React from 'react';\nimport Countdown from 'react-countdown-now';\n\nclass MeditationSetup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      medTime: 5,\n      isMeditating: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      medTime: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    console.log('You wish to meditate for: ' + this.state.medTime); //this.setState({isMeditating: true});\n\n    event.preventDefault();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Welcome to some piece of mind\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"To begin please enter the length of time you wish to meditate for:\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      value: this.state.medTime,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"5 Minutes\"), React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"10 Minutes\"), React.createElement(\"option\", {\n      value: \"15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"15 Minutes\"), React.createElement(\"option\", {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"20 Minutes\")), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(Countdown, {\n      date: Date.now() + 20000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n} //figure out how to dynamically create this object with the value from the Setup\n//also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n\nexport default MeditationSetup;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js"],"names":["React","Countdown","MeditationSetup","Component","constructor","props","state","medTime","isMeditating","handleChange","bind","handleSubmit","event","setState","target","value","console","log","preventDefault","render","Date","now"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,MAAMC,eAAN,SAA8BF,KAAK,CAACG,SAApC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,CADE;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACG,KAAD,EAAQ;AAClB,SAAKC,QAAL,CAAc;AAACN,MAAAA,OAAO,EAAEK,KAAK,CAACE,MAAN,CAAaC;AAAvB,KAAd;AACD;;AAEDJ,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClBI,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+B,KAAKX,KAAL,CAAWC,OAAtD,EADkB,CAElB;;AAEAK,IAAAA,KAAK,CAACM,cAAN;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAFF,EAGE;AAAM,MAAA,QAAQ,EAAE,KAAKR,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,OAA1B;AAAmC,MAAA,QAAQ,EAAE,KAAKE,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CADF,EAOE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAHF,EAaE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEW,IAAI,CAACC,GAAL,KAAa,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAiBD;;AAzCwC,C,CA4C3C;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,eAAenB,eAAf","sourcesContent":["import React from 'react'\nimport Countdown from 'react-countdown-now'\n\nclass MeditationSetup extends React.Component{\n    constructor(props) {\n      super(props);\n      this.state = {\n        medTime: 5,\n        isMeditating: false,\n      };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({medTime: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      console.log('You wish to meditate for: ' + this.state.medTime);\n      //this.setState({isMeditating: true});\n\n      event.preventDefault();\n    }\n    \n    render(){\n      return(\n        <div>\n          <h1>Welcome to some piece of mind</h1>\n          <p>To begin please enter the length of time you wish to meditate for:</p>\n          <form onSubmit={this.handleSubmit}>\n            <select value={this.state.medTime} onChange={this.handleChange}>\n              <option value=\"5\">5 Minutes</option>\n              <option value=\"10\">10 Minutes</option>\n              <option value=\"15\">15 Minutes</option>\n              <option value=\"20\">20 Minutes</option>\n            </select>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          {/* <Timer time={this.state.medTime}></Timer> */}\n          <Countdown date={Date.now() + 20000} />\n        </div>\n      )\n    }\n  }\n\n  //figure out how to dynamically create this object with the value from the Setup\n  //also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n            \n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n  export default MeditationSetup;"]},"metadata":{},"sourceType":"module"}