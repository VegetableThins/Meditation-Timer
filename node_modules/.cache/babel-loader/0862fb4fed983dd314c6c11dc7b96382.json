{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js\";\nimport React from 'react';\nimport Countdown from 'react-countdown-now';\nimport PropTypes from 'prop-types';\n\nclass MeditationSetup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      time: 0,\n      isMeditating: false\n    };\n    this.updateTime = this.updateTime.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  updateTime(e) {\n    console.log(\"selected\");\n    this.setState({\n      minutes: e.target.value\n    });\n  }\n\n  startTimer(event) {\n    console.log('You wish to meditate for: ' + this.state.medTime); //this.setState({isMeditating: true});\n\n    this.setState({\n      time: parseInt(this.state.minutes, 10) * 1000 * 60\n    });\n    this.setState({\n      medTime: this.state.time\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Welcome to some piece of mind\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"To begin please enter the length of time you wish to meditate for:\"), React.createElement(\"select\", {\n      value: this.state.minutes,\n      onChange: this.updateTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"5 Minutes\"), React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"10 Minutes\"), React.createElement(\"option\", {\n      value: \"15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"15 Minutes\"), React.createElement(\"option\", {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"20 Minutes\")), React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Start\"), React.createElement(Countdown, {\n      date: Date.now() + this.state.medTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }\n\n} // MeditationSetup.propTypes = {\n//     medTime: PropTypes.number.isRequired\n// }\n//figure out how to dynamically create this object with the value from the Setup\n//also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n\nexport default MeditationSetup;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js"],"names":["React","Countdown","PropTypes","MeditationSetup","Component","constructor","props","state","minutes","medTime","time","isMeditating","updateTime","bind","startTimer","e","console","log","setState","target","value","event","parseInt","preventDefault","render","Date","now"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,GADE;AAEXC,MAAAA,OAAO,EAAE,CAFE;AAGXC,MAAAA,IAAI,EAAE,CAHK;AAIXC,MAAAA,YAAY,EAAE;AAJH,KAAb;AAOA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AACDD,EAAAA,UAAU,CAACG,CAAD,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAKC,QAAL,CAAc;AACVV,MAAAA,OAAO,EAAEO,CAAC,CAACI,MAAF,CAASC;AADR,KAAd;AAGH;;AAEDN,EAAAA,UAAU,CAACO,KAAD,EAAQ;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+B,KAAKV,KAAL,CAAWE,OAAtD,EADgB,CAEhB;;AACE,SAAKS,QAAL,CAAc;AACVR,MAAAA,IAAI,EAAGY,QAAQ,CAAC,KAAKf,KAAL,CAAWC,OAAZ,EAAqB,EAArB,CAAR,GAAmC,IAAnC,GAA0C;AADvC,KAAd;AAGF,SAAKU,QAAL,CAAc;AAACT,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG;AAArB,KAAd;AACAW,IAAAA,KAAK,CAACE,cAAN;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAFF,EAII;AAAQ,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,OAA1B;AAAmC,MAAA,QAAQ,EAAE,KAAKI,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CAJJ,EAUI;AAAQ,MAAA,OAAO,EAAE,KAAKE,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVJ,EAaE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEW,IAAI,CAACC,GAAL,KAAa,KAAKnB,KAAL,CAAWE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAiBD;;AAhDwC,C,CAmD7C;AACA;AACA;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,eAAeN,eAAf","sourcesContent":["import React from 'react'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\nclass MeditationSetup extends React.Component{\n    constructor(props) {\n      super(props);\n      this.state = {\n        minutes: \"5\",\n        medTime: 0,\n        time: 0,\n        isMeditating: false,\n      };\n  \n      this.updateTime = this.updateTime.bind(this);\n      this.startTimer = this.startTimer.bind(this);\n    }\n    updateTime(e) {\n        console.log(\"selected\");\n        this.setState({\n            minutes: e.target.value,\n        });\n    }\n  \n    startTimer(event) {\n      console.log('You wish to meditate for: ' + this.state.medTime);\n      //this.setState({isMeditating: true});\n        this.setState({\n            time: (parseInt(this.state.minutes, 10) * 1000 * 60)\n        });\n      this.setState({medTime: this.state.time});\n      event.preventDefault();\n    }\n    \n    render(){\n      return(\n        <div>\n          <h1>Welcome to some piece of mind</h1>\n          <p>To begin please enter the length of time you wish to meditate for:</p>\n          {/* <form onSubmit={this.handleSubmit}> */}\n            <select value={this.state.minutes} onChange={this.updateTime}>\n              <option value=\"5\">5 Minutes</option>\n              <option value=\"10\">10 Minutes</option>\n              <option value=\"15\">15 Minutes</option>\n              <option value=\"20\">20 Minutes</option>\n            </select>\n            <button onClick={this.startTimer}>Start</button>\n          {/* </form> */}\n          {/* <Timer time={this.state.medTime}></Timer> */}\n          <Countdown date={Date.now() + this.state.medTime} />\n        </div>\n      )\n    }\n}\n\n// MeditationSetup.propTypes = {\n//     medTime: PropTypes.number.isRequired\n// }\n\n  //figure out how to dynamically create this object with the value from the Setup\n  //also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n            \n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n  export default MeditationSetup;"]},"metadata":{},"sourceType":"module"}