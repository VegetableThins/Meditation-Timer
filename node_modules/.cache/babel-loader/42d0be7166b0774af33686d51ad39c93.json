{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/App.js\";\nimport React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js';\nimport Countdown from 'react-countdown-now';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false\n    }; // this.updateTime = this.updateTime.bind(this);\n\n    this.startTimer = this.startTimer.bind(this);\n  } // this.props.minutes = e.target.value;\n\n\n  changeMinutes(event) {\n    this.setState({});\n  }\n\n  startTimer(event) {\n    console.log('Meditation beginning with: ' + this.props.medTime / 1000 / 60 + 'minutes remaining');\n    const isMeditating = this.props.isMeditating;\n    this.setState({\n      isMeditating: !isMeditating\n    }); //   this.props.medTime = (parseInt(this.props.minutes, 10) * 1000 * 60)\n\n    this.setState({\n      medTime: parseInt(this.props.minutes, 10) * 1000 * 60\n    });\n  }\n\n  render() {\n    const isMeditating = this.state.isMeditating;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, !this.state.isMeditating && React.createElement(MeditationSetup, {\n      minutes: this.changeMinutes(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), this.state.isMeditating && React.createElement(Countdown, {\n      date: Date.now() + this.state.medTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/App.js"],"names":["React","MeditationSetup","Countdown","PropTypes","App","Component","constructor","props","state","minutes","medTime","isMeditating","startTimer","bind","changeMinutes","event","setState","console","log","parseInt","render","Date","now"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,GADE;AAEXC,MAAAA,OAAO,EAAE,CAFE;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb,CAFiB,CAQjB;;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AAED,GAZ8B,CAa7B;;;AAEFC,EAAAA,aAAa,CAACC,KAAD,EAAO;AAClB,SAAKC,QAAL,CAAc,EAAd;AAGD;;AAGDJ,EAAAA,UAAU,CAACG,KAAD,EAAQ;AAChBE,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAiC,KAAKX,KAAL,CAAWG,OAAX,GAAqB,IAArB,GAA4B,EAA7D,GAAkE,mBAA9E;AADgB,UAETC,YAFS,GAEO,KAAKJ,KAFZ,CAETI,YAFS;AAGhB,SAAKK,QAAL,CAAc;AAACL,MAAAA,YAAY,EAAE,CAACA;AAAhB,KAAd,EAHgB,CAIlB;;AACI,SAAKK,QAAL,CAAc;AACVN,MAAAA,OAAO,EAAGS,QAAQ,CAAC,KAAKZ,KAAL,CAAWE,OAAZ,EAAqB,EAArB,CAAR,GAAmC,IAAnC,GAA0C;AAD1C,KAAd;AAGD;;AACHW,EAAAA,MAAM,GAAE;AACJ,UAAMT,YAAY,GAAG,KAAKH,KAAL,CAAWG,YAAhC;AACF,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC,KAAKH,KAAL,CAAWG,YAAZ,IAA4B,oBAAC,eAAD;AAAiB,MAAA,OAAO,EAAE,KAAKG,aAAL,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD/B,EAaG,KAAKN,KAAL,CAAWG,YAAX,IAA2B,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEU,IAAI,CAACC,GAAL,KAAa,KAAKd,KAAL,CAAWE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAb9B,CADF;AAiBD;;AAlD8B;;AAqDjC,eAAeN,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport MeditationSetup from './MeditationSetup.js'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: \"5\",\n      medTime: 0,\n      isMeditating: false,\n    };\n\n    // this.updateTime = this.updateTime.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    \n  }\n    // this.props.minutes = e.target.value;\n  \n  changeMinutes(event){\n    this.setState({\n\n    });\n  }\n  \n\n  startTimer(event) {\n    console.log('Meditation beginning with: ' + (this.props.medTime / 1000 / 60)+ 'minutes remaining');\n    const {isMeditating} = this.props; \n    this.setState({isMeditating: !isMeditating});\n  //   this.props.medTime = (parseInt(this.props.minutes, 10) * 1000 * 60)\n      this.setState({\n          medTime: (parseInt(this.props.minutes, 10) * 1000 * 60),\n      });\n    }\n  render(){\n      const isMeditating = this.state.isMeditating;\n    return(\n      <div>\n        {!this.state.isMeditating && <MeditationSetup minutes={this.changeMinutes()}></MeditationSetup>}\n        {/* <h1>Welcome to some piece of mind</h1>\n        <p>To begin please enter the length of time you wish to meditate for:</p>\n          <select value={this.state.minutes} onChange={this.updateTime}>\n            <option value=\"5\">5 Minutes</option>\n            <option value=\"10\">10 Minutes</option>\n            <option value=\"15\">15 Minutes</option>\n            <option value=\"20\">20 Minutes</option>\n          </select>\n          <button onClick={this.startTimer}>Start</button> */}\n        {/* </form> */}\n        {/* <Timer time={this.state.medTime}></Timer> */}\n        {this.state.isMeditating && <Countdown date={Date.now() + this.state.medTime}/>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}