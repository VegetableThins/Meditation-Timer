{"ast":null,"code":"var _jsxFileName = \"/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js\";\nimport React from 'react';\nimport Countdown from 'react-countdown-now';\nimport PropTypes from 'prop-types';\n\nclass MeditationSetup extends React.Component {\n  updateTime(e) {\n    this.setState({\n      minutes: e.target.value\n    });\n    console.log(\"minutes updated to: \" + this.props.minutes);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"To begin please enter the length of time you wish to meditate for:\"), React.createElement(\"select\", {\n      value: this.props.minutes,\n      onChange: this.updateTime.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"5 Minutes\"), React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"10 Minutes\"), React.createElement(\"option\", {\n      value: \"15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"15 Minutes\"), React.createElement(\"option\", {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"20 Minutes\")), React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Start\"));\n  }\n\n} // MeditationSetup.propTypes = {\n//     medTime: PropTypes.number.isRequired\n// }\n//figure out how to dynamically create this object with the value from the Setup\n//also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n\nexport default MeditationSetup;","map":{"version":3,"sources":["/Users/VegetableThins/Github/Meditation-Timer/src/Components/MeditationSetup.js"],"names":["React","Countdown","PropTypes","MeditationSetup","Component","updateTime","e","setState","minutes","target","value","console","log","props","render","bind","startTimer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAA6C;AACzCC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACV,SAAKC,QAAL,CAAc;AACVC,MAAAA,OAAO,EAAEF,CAAC,CAACG,MAAF,CAASC;AADR,KAAd;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyB,KAAKC,KAAL,CAAWL,OAAhD;AACH;;AAEDM,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EADJ,EAEI;AAAQ,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWL,OAA1B;AAAmC,MAAA,QAAQ,EAAE,KAAKH,UAAL,CAAgBU,IAAhB,CAAqB,IAArB,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,EAII;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CAFJ,EAQA;AAAQ,MAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARA,CADJ;AAYH;;AArBwC,C,CAwB7C;AACA;AACA;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,eAAeb,eAAf","sourcesContent":["import React from 'react'\nimport Countdown from 'react-countdown-now'\nimport PropTypes from 'prop-types'\n\nclass MeditationSetup extends React.Component{\n    updateTime(e) {\n        this.setState({\n            minutes: e.target.value,\n        });\n        console.log(\"minutes updated to: \" + this.props.minutes);\n    }\n\n    render(){\n        return(\n            <div>\n                <p>To begin please enter the length of time you wish to meditate for:</p>\n                <select value={this.props.minutes} onChange={this.updateTime.bind(this)}>\n                    <option value=\"5\">5 Minutes</option>\n                    <option value=\"10\">10 Minutes</option>\n                    <option value=\"15\">15 Minutes</option>\n                    <option value=\"20\">20 Minutes</option>\n            </select>\n            <button onClick={this.startTimer}>Start</button>\n          </div>\n        )\n    }\n}\n\n// MeditationSetup.propTypes = {\n//     medTime: PropTypes.number.isRequired\n// }\n\n  //figure out how to dynamically create this object with the value from the Setup\n  //also figure out how to show and hide react components when things happen\n//   class Timer extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//           minutes: 0,\n//           seconds: 0,\n//         };\n//     }\n//       render(){\n//         console.log(this.props.time);\n//         var currentTime = new Date();\n//         var endDate = currentTime.setMinutes(currentTime.getMinutes() + this.props.time);\n//         var x  = setInterval(function(){\n//             var now = new Date();\n//             var distance = endDate - now;\n            \n//             this.setState({\n//                 minute: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n//                 seconds: Math.floor((distance % (1000 * 60)) / 1000),\n//             });\n//             // minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//             // seconds = Math.floor((distance % (1000 * 60)) / 1000);\n//             if(distance < 0){\n//                 clearInterval(x);\n//             }\n//         }, 1000);\n//         return(\n//         <div>\n//         <p>Time Remaining:<br/>\n//             <span>{this.state.minutes} minutes</span>\n//             <span>{this.state.seconds} seconds</span>\n//         </p>\n//     </div>\n//           )\n//       }\n//   }\n\n  export default MeditationSetup;"]},"metadata":{},"sourceType":"module"}